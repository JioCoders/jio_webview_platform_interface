# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Flutter-CI

on:
  push:
#    tags:
#      - 'v*' # Trigger on version tags like v1.0.0
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Flutter Build & Release
    runs-on: ubuntu-latest

    steps:
      # Check out the repository
      - name: Clone repository
        uses: actions/checkout@v4

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      # - uses: dart-lang/setup-dart@v1

      #      - uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603
      # Set up Dart and Flutter
      - name: Setup Flutter Environment
        uses: subosito/flutter-action@v2
        id: flutter-action
        with:
          channel: stable # [dev, beta]
          flutter-version: 3.24.4 #[5b12b74, tag, commit, branch, main]
          #          flutter-version-file: pubspec.yaml # path to pubspec.yaml [exact-ver]
          # optional parameters follow
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:" # optional, change this to force refresh cache
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:" # optional, change this to specify the cache path
          pub-cache-key: "flutter-pub:os:-:channel:-:version:-:arch:-:hash:" # optional, change this to force refresh cache of dart pub get dependencies
          pub-cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:" # optional, change this to specify the cache path

      - name: Print outputs - Command shell
        shell: bash
        run: |
          echo CACHE-PATH=${{ steps.flutter-action.outputs.CACHE-PATH }}
          echo CACHE-KEY=${{ steps.flutter-action.outputs.CACHE-KEY }}
          echo CHANNEL=${{ steps.flutter-action.outputs.CHANNEL }}
          echo VERSION=${{ steps.flutter-action.outputs.VERSION }}
          echo ARCHITECTURE=${{ steps.flutter-action.outputs.ARCHITECTURE }}
          echo PUB-CACHE-PATH=${{ steps.flutter-action.outputs.PUB-CACHE-PATH }}
          echo PUB-CACHE-KEY=${{ steps.flutter-action.outputs.PUB-CACHE-KEY }}

      - name: Get Flutter Version
        run: |
          flutter --version
          flutter doctor
      # Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      # Verify the package (optional but recommended)
      - name: Analyze project source
        run: flutter analyze
      # run: flutter analyze --no-fatal-infos --no-fatal-warnings

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      - name: Run tests
        run: flutter test

#      - name: Create GitHub Release
#        uses: softprops/action-gh-release@v2
#        with:
#          tag_name: ${{ github.ref_name }}
#          name: Release ${{ github.ref_name }}
#          body: |
#            Changes in this release:
#            - Feature 1
#            - Bugfix 2
#            - Improvement 3
#          draft: false  # Set to true if you want a draft release
#          prerelease: false  # Set to true if it's a pre-release
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN_RELEASE }}
#        run: |
#          flutter build apk
#          ./create_release.sh

      - name: Configure pub.dev token
        env:
          PUB_DEV_CREDENTIALS: ${{ secrets.PUB_DEV_CREDENTIALS }}
        run: echo "$PUB_DEV_CREDENTIALS" > ~/.pub-cache/credentials.json

#      - name: Configure pub.dev credentials
#        env:
#          PUB_CREDENTIALS: ${{ secrets.PUB_DEV_CREDENTIALS }}
#        run: |
#          mkdir -p ~/.pub-cache
#          echo "$PUB_CREDENTIALS" > ~/.pub-cache/credentials.json

      - name: Format code
        run: dart format --fix .
      - name: Check Publish Warnings
        run: flutter pub publish --dry-run

      # Extract Version
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

      # Check if Tag Exists
      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      # Modify Tag if it Exist
#      - name: Modify Tag
#        if: env.TAG_EXISTS == 'true'
#        id: modify_tag
#        run: |
#          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
#          echo "VERSION=$new_version" >> $GITHUB_ENV

      # Publish the package
#      - name: Publish to pub.dev
#        run: flutter pub publish --force
#        env:
#          PUB_DEV_TOKEN: ${{ secrets.PUB_DEV_TOKEN }}
#        run: echo "$PUB_DEV_TOKEN" > ~/.pub-cache/credentials.json && dart pub publish --force
